version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - web
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  nest:
    image: suhach0523/techeerism-nest:arm2
    networks:
      - web
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.services.nest.loadbalancer.server.port=8000
        - traefik.http.routers.nest.rule=Host(`go.localhost`) && PathPrefix(`/api/v1`)
        - traefik.http.routers.nest.middlewares=nest-stripprefix
        - traefik.http.middlewares.nest-stripprefix.stripprefix.prefixes=/api/v1

  go:
    image: suhach0523/techeerism-parser:arm
    networks:
      - web
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.services.go.loadbalancer.server.port=8080
        - traefik.http.routers.go.rule=Host(`go.localhost`) && PathPrefix(`/api/v1`)
        - traefik.http.routers.go.middlewares=go-stripprefix
        - traefik.http.middlewares.go-stripprefix.stripprefix.prefixes=/api/v1"

networks:
  web:
    driver: overlay
